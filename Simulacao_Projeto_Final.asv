clear; close all; clc;
try
    fclose(instrfindall);
catch
end
rosshutdown;

%% Timers
T_exp = 60; % Tempo de experimento
t_exp = tic;
T_run = 1/30; % Período do experimento
t_run = tic;
T_draw=0;
tempo = [];

%% Vetores de armazenamento
P = [0;0;0]; % Vetor de posição
V = [0;0;0]; % Vetor de velocidade
V_dot = [0;0;0]; % Vetor de aceleração
nu = [0;0]; % Vetor de controle
psi = 0; % Orientação Psi
pd = []; % Posição desejada para plot
pr = []; % Posição realizada para plot
pveld = []; % Velocidade desejada para plot
pvelr = []; % Velocidade realizada para plot
pu = []; % Esforço de controlador
er = []; % Erro para plot
ppsid = []; % Orientação desejada
ppsir = []; % Orientação realizada
X0 = [0;0;0;0]; % Vetor de estados iniciais 
Xh = [0;0;0;0]; % Vetor de estados estimados 
Xkss = [0;0;0;0];
Xh1 = [0;0;0;0];

%% Ganhos / Parametros
w = (2*pi)/30; % Frequência da trajetória
Ku = diag([.88 .88]); % Matriz de parâmetros do modelo relacionado ao controlador
Kv = diag([0.18227 0.17095]); % Matriz de parâmetros do modelo relacionado a velocidade tangencial
Kz = 1; % Ganho proporcional em Z
K_psi = 1; % Ganho proporcional em psi

%% Escolha do controlador
% 1 - LQR; 2 - LQG; 3 - Hinf
flag_u = 3;

%% Modelo em Espaço de Estados
A = [0 0     1       0;
     0 0     0       1;
     0 0 -Kv(1,1)    0;
     0 0     0   -Kv(2,2)];
B = [0 0 Ku(1,1)   0;
     0 0    0   Ku(2,2)]';
C = eye(4);
D = zeros(4,2);

sysc = ss(A,B,C,D); % Sistema em tempo continuo
sysd = c2d(sysc,T_run,'tustin'); % Sistema em tempo discreto

%% Matrizes de ponderação LQR
% Regra de Bryson
Qii = [.01 .01 .1 .1].^-2;  
Rii = [1 1].^-2;

Q1 = diag(Qii); % Matriz de peso para os estados
R1 = diag(Rii); % Matriz de peso para o controlador

Plqr = care(A,B,Q1,R1); % Solução da Equação Algébrica e Riccati
Klqr = R1\B'*Plqr; % Ganho LQR de horizonte infinito 

%% Filtro de Kalman
Rw = diag([2.5 2 .1 .1].^2); % Matriz de covariância do ruído de processo
Rv = diag([.05 .05 .1 .1]).^2; % Matriz de covariância do ruído de medida

Pkf = care(A,C,Rw,Rv); % Solução da Equação Algébrica e Riccati

%% KF - Inicialização
xkkm1 = X0; % Estado inicial
Pkkm1 = Pkf; % Covariância de erro inicial

%% Planta generalizada Hinf
sqrtQ = chol(Q1); sqrtR = chol(R1); sqrtRw = chol(Rw); sqrtRv = chol(Rv);

nx = size(A,1); nu1 = size(B,2); ny = size(C,1);
nz1 = nx; nz2 = nu1; nd = nx; nn = ny; nz = nz1 + nz2; nw = nd + nn;

B1 = [sqrtRw zeros(nx,nn)]; B2 = B;
C1 = [sqrtQ; zeros(nz2,nx)]; C2 = C;
D11 = zeros(nz,nw); D12 = [zeros(nz1,nu1); sqrtR];
D21 = [zeros(ny,nd) sqrtRv]; D22 = D;

AP = A;
BP = [B1 B2];
CP = [C1;C2];
DP = [D11 D12; D21 D22];
Ps = ss(AP,BP,CP,DP);

Khinf = hinfsyn(Ps,ny,nu1);
Khinfd = c2d(Khinf, T_run, 'tustin');

asys = ss(A,B1,C1,D11);
asysd = c2d(asys,T_run,'Tustin')

figure();

while toc(t_exp) < T_exp
    if toc(t_run) > T_run
        tempo = [tempo toc(t_exp)];
        dt = toc(t_run);
        t_run = tic;
        t = toc(t_exp);
        t_corpo = tic;

for t = 0:T_run:T_exp
    tempo = [tempo t];
    t_run = tic;
    
   
    X = [P(1:2); V(1:2)]; % Matriz de Estados

    if flag_u == 2
    %% KF - Inovação (Medida Recente)
    nk = X - sysd.C*xkkm1; % Erro de previsão
    Sk = sysd.C*Pkkm1*sysd.C' + Rv; % Covariância da inovação nk

    %% KF - Correção
    Kk = Pkkm1*sysd.C'*inv(Sk); % Ganho de Kalman
    Xh = xkkm1 + Kk*nk; % Estado estimado
    Pkk = (eye(4) - Kk*sysd.C)*Pkkm1; % Covariância de erro
    end

    %% PLANEJADOR DE MOVIMENTO
    % % Lemniscata
    Pd = [sin(w*t); sin(2*w*t); 1]; % Posição desejada
    Vd = [cos(w*t)*w; cos(2*w*t)*2*w; 0]; % Velocidade desejada
    Vd_dot = [-sin(w*t)*w^2; -sin(2*w*t)*4*w^2; 0]; % Aceleração desejada

    Xr = [Pd(1:2); Vd(1:2)]; % Vetor de Estados de referência

    % % Orientação
    psid = [0; 0]; % Orientação desejada

    pd = [pd Pd(1:3)]; % Armazenamento da posição desejada
    pveld = [pveld Vd(1:3)]; % Armazenamento da velocidade desejada
    ppsid = [ppsid psid(1)]; % Armazenamento da orientação desejada

    %% LEI DE CONTROLE

    if flag_u == 1
        nu = - Klqr*(X - Xr); % Lei de controle com LQR usando estados reais
    else if flag_u == 2
            nu = - Klqr*(Xh - Xr); % Lei de controle com LQR usando estados estimados por filtro de Kalman (LQG)  
    else if flag_u == 3
            nu = Khinf.C*Xh1; % 
            y = sysd.C*(1.4*X - Xr);
    end
    end
    end

    %% Controle em z

    Z_dot_ref = Vd(3) + Kz*(Pd(3) - P(3)); % Velocidade de referência em z
    Z_dot_ref = min(max(Z_dot_ref,-1),1); % Saturação de +-1m/s em z

    V(3) =  Z_dot_ref; 

    %% Controle de orientação

    psi_til = psid(1) - psi; % Erro em psi

    % Filtro para otimização de caminho para orientação
    if abs(psi_til) > pi
        psi_til = psi_til - sign(psi_til)*2*pi;
    end

    psi_dot_ref = psid(2) + K_psi*psi_til; % Velocidade de referência em psi

    psi_dot_ref = min(max(psi_dot_ref,-1),1); % Limitador do controlador em psi

    u = [nu(1); nu(2); Z_dot_ref; psi_dot_ref]; % Vetor de comandos de controle Linear

    %% Simulação por discretização (x e y)
    if flag_u == 1
        Xkss = sysd.A*X + sysd.B*nu; % Reconstrução dos estados
    else if flag_u == 2
            %% KF - Prediction
            Xkss = sysd.A*Xh + sysd.B*nu; % Reconstrução dos estados estimados
            xkkm1 = Xkss + sqrt(Rw)*[randn(1);randn(1);0;0]; % Incersão de ruído nos estados
            Pkm1k = sysd.A*Pkk*sysd.A' + Rw; Pkkm1 = Pkm1k + sqrt(Rv)*[randn(1);randn(1);0;0]; % Reconstrução da matriz de covariância de erro
    else if flag_u == 3 
            Xkss = sysd.A*X + asysd.B*[Xr;zeros(4,1)] + sysd.B*nu;
            Xh1 = Khinfd.A*Xh1 + Khinfd.B*y;
            xkkm1 = Xkss;
    end
    end
    end

    P(1) = Xkss(1); P(2) = Xkss(2); V(1) = Xkss(3); V(2) = Xkss(4);

    %% Simulação por integração numérica (z e psi)
    P(3) = P(3) + V(3)*T_run; % Integracao de vel para achar pos em z
    psi = psi + psi_dot_ref*T_run; % Integração de psi_dot para encontrar orientação

    pr = [pr P(1:3)]; % Recebe a posição para plot de trajetoria
    pvelr = [pvelr V(1:3)]; % Recebe a Velocidade para plot
    ppsir = [ppsir psi]; % Recebe orientação para calculo de erro

    pu = [pu u];

    %% Plot de trajetória online
    l = 0.1;
    T_draw=T_draw+T_run;
    if T_draw>0.5
        plot3(pd(1,:),pd(2,:),pd(3,:),'b--','LineWidth',1);
        hold on
        grid on
        axis([-2 2 -2 2 0 2])
        plot3(pr(1,:),pr(2,:),pr(3,:),'g','LineWidth',1);
        plot3(P(1),P(2),P(3),'g*','LineWidth',1);
        plot3([P(1), P(1) + l*cos(psi)], [X(2), X(2) + l*sin(psi)], [P(3) P(3)],'-r','LineWidth',1);
        plot3(Pd(1),Pd(2),Pd(3),'b*','LineWidth',1);
        T_draw=0;
        hold off
        drawnow
    end
end
% end

er = pd - pr; % Calculo de erros de posicionamento (z, y e z)
err = ppsid - ppsir; % Cálculo de erro de orientação (Psi)

%% Plot dos gráficos de Erro (x, y, z e Psi)
figure('Name','Graficos de erro')
subplot(4,1,1)
plot (tempo,er(1,:),'b','LineWidth',1);
xlabel('Tempo(s)');ylabel('Erro em x(m)');
grid on
subplot(4,1,2)
plot (tempo,er(2,:),'r','LineWidth',1)
xlabel('Tempo(s)');ylabel('Erro em y(m)');
grid on
subplot(4,1,3)
plot (tempo,er(3,:),'k','LineWidth',1)
xlabel('Tempo(s)');ylabel('Erro em z(m)');
grid on
subplot(4,1,4)
plot (tempo,err,'c','LineWidth',1)
xlabel('Tempo(s)');ylabel('Erro em psi(rad)');
grid on

%% Plot dos gráficos de Posição VS Tempo (x, y,z e Psi)
figure('Name','Gráficos de posição vs Tempo')
subplot(4,1,1)
plot (tempo,pr(1,:),'r','LineWidth',1);
hold on
plot (tempo,pd(1,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Posição em x (m)');
legend('Posição realizada','Posição desejada');
grid on
subplot(4,1,2)
plot (tempo,pr(2,:),'r','LineWidth',1);
hold on
plot (tempo,pd(2,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Posição em y (m)');
legend('Posição realizada','Posição desejada');
grid on
subplot(4,1,3)
plot (tempo,pr(3,:),'r','LineWidth',1);
hold on
plot (tempo,pd(3,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Posição em z (m)');
legend('Posição realizada','Posição desejada');
grid on
subplot(4,1,4)
plot (tempo,ppsir,'r','LineWidth',1);
hold on
plot (tempo,ppsid,'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Posição em psi (rad)');
legend('Posição realizada','Posição desejada');
grid on

%% Plot de Gráficos de Velocidade VS Tempo (x, y e z)
figure('Name','Gráficos de velocidade vs Tempo')
subplot(3,1,1)
plot (tempo,pvelr(1,:),'r','LineWidth',1);
hold on
plot (tempo,pveld(1,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Velocidade em x (m/s)');
legend('Velocidade realizada','Velocidade desejada');
grid on
subplot(3,1,2)
plot (tempo,pvelr(2,:),'r','LineWidth',1);
hold on
plot (tempo,pveld(2,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Velocidade em y (m/s)');
legend('Velocidade realizada','Velocidade desejada');
grid on
subplot(3,1,3)
plot (tempo,pvelr(3,:),'r','LineWidth',1);
hold on
plot (tempo,pveld(3,:),'b--','LineWidth',1);
xlabel('Tempo(s)');ylabel('Velocidade em z (m/s)');
legend('Velocidade realizada','Velocidade desejada');
grid on

%% Plot dos Gráficos de esforço de controlador (x, y, z e Psi)
figure('Name','Esforço do controlador')
subplot(4,1,1)
plot (tempo,pu(1,:),'b');
xlabel('Tempo(s)');ylabel('Esforço do controlador em x');
grid on
subplot(4,1,2)
plot (tempo,pu(2,:),'b');
xlabel('Tempo(s)');ylabel('Esforço do controlador em y');
grid on
subplot(4,1,3)
plot (tempo,pu(3,:),'b');
xlabel('Tempo(s)');ylabel('Esforço do controlador em z');
grid on
subplot(4,1,4)
plot (tempo,pu(4,:),'b');
xlabel('Tempo(s)');ylabel('Esforço do controlador em psi');
grid on